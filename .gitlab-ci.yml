image:                             paritytech/kubetools:helm3

default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure

variables:
  KUBE_NAMESPACE:                  "faucetbots"
  CI_REGISTRY:                     "docker.io/paritytech"
  DOCKER_TAG:                      '$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA'
  GIT_STRATEGY:                    fetch
  VAULT_SERVER_URL:                "https://vault.parity-mgmt-vault.parity.io"
  VAULT_AUTH_PATH:                 "gitlab-parity-io-jwt"
  VAULT_AUTH_ROLE:                 "cicd_gitlab_parity_${CI_PROJECT_NAME}"

stages:
  - quality
  - dockerize
  - deploy

.on-release-prod:                   &on-release-prod
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+.*$/'

.build_lint:                        &build_lint
  tags:
    - kubernetes-parity-build
  image:                            node:16.10-alpine

.build_dryrun:                      &build_dryrun
  tags:
    - kubernetes-parity-build
  image:                            quay.io/buildah/stable
  interruptible:                    true
  script:
    # create the docker image name
    - DOCKERFILE="Dockerfile-$(echo "${CI_JOB_NAME}" | awk -F'-' '{print $NF}')"
    - export DOCKER_IMAGE="${CI_REGISTRY}/${CI_JOB_NAME}"
    # set 'BUILDKIT_INLINE_CACHE' so generated images can be used for caching subsequently
    - export BUILD_ARGS="$BUILD_ARGS --build-arg BUILDKIT_INLINE_CACHE=1"
    # pull latest image used as cache to speed up the docker build process
    - buildah pull $DOCKER_IMAGE:latest || true
    # do: docker build
    - eval "buildah bud --format=docker --cache-from $DOCKER_IMAGE:latest -t" "$DOCKER_IMAGE:$DOCKER_TAG" "-t $DOCKER_IMAGE:latest" "$BUILD_ARGS"  "-f $DOCKERFILE" "."

.build_and_push:                   &build_and_push
  tags:
    - kubernetes-parity-build
  image:                           quay.io/buildah/stable
  interruptible:                   true
  secrets:
      DOCKER_HUB_USER:
        vault:                     cicd/gitlab/parity/DOCKER_HUB_USER@kv
        file:                      false
      DOCKER_HUB_PASS:
        vault:                     cicd/gitlab/parity/DOCKER_HUB_PASS@kv
        file:                      false
  script:
    # create the docker image name
    - DOCKERFILE="Dockerfile-$(echo "${CI_JOB_NAME}" | awk -F'-' '{print $NF}')"
    - export DOCKER_IMAGE="${CI_REGISTRY}/${CI_JOB_NAME}"
    # set 'BUILDKIT_INLINE_CACHE' so generated images can be used for caching subsequently
    - export BUILD_ARGS="$BUILD_ARGS --build-arg BUILDKIT_INLINE_CACHE=1"
    # pull latest image used as cache to speed up the docker build process
    - buildah pull $DOCKER_IMAGE:latest || true
    # login to the docker registry
    - echo "$DOCKER_HUB_PASS" | buildah login -u "$DOCKER_HUB_USER" --password-stdin  docker.io
    # do: docker build
    - eval "buildah bud --format=docker --cache-from $DOCKER_IMAGE:latest -t" "$DOCKER_IMAGE:$DOCKER_TAG" "-t $DOCKER_IMAGE:latest" "$BUILD_ARGS"  "-f $DOCKERFILE" "."
    # do: docker push
    - buildah push --format=v2s2 "$DOCKER_IMAGE:latest"
    - buildah push --format=v2s2 "$DOCKER_IMAGE:$DOCKER_TAG"

check-typing:
  stage:                           quality
  <<:                              *build_lint
  script:
    # TODO: remove after https://github.com/paritytech/ci_cd/issues/389
    - apk add --no-cache git openssh
    - yarn --immutable --network-concurrency 1
    - yarn typing

check-linting:
  stage:                           quality
  <<:                              *build_lint
  script:
    # TODO: remove after https://github.com/paritytech/ci_cd/issues/389
    - apk add --no-cache git openssh
    - yarn --immutable --network-concurrency 1
    - yarn lint

check-formatting:
  stage:                           quality
  <<:                              *build_lint
  script:
    # TODO: remove after https://github.com/paritytech/ci_cd/issues/389
    - apk add --no-cache git openssh
    - yarn --immutable --network-concurrency 1
    - yarn format

drybuild-bot:
  stage:                           quality
  <<:                              *build_dryrun

drybuild-server:
  stage:                           quality
  <<:                              *build_dryrun

faucet-bot:
  stage:                           dockerize
  <<:                              *on-release-prod
  <<:                              *build_and_push

faucet-server:
  stage:                           dockerize
  <<:                              *on-release-prod
  <<:                              *build_and_push


#### stage:                        deploy

.deploy-k8s:                       &deploy-k8s
  secrets:
    SMF_BACKEND_FAUCET_ACCOUNT_MNEMONIC:
      vault:                       cicd/gitlab/parity/substrate-matrix-faucet/$CI_ENVIRONMENT_NAME/FAUCET_ACCOUNT_MNEMONIC@kv
      file:                        false
    SMF_BOT_MATRIX_ACCESS_TOKEN:
      vault:                       cicd/gitlab/parity/substrate-matrix-faucet/$CI_ENVIRONMENT_NAME/MATRIX_ACCESS_TOKEN@kv
      file:                        false
  script:
    - echo ${KUBE_NAMESPACE}
    - echo ${CI_ENVIRONMENT_NAME}

    # do a dry-run 1st
    - helm upgrade ${CI_ENVIRONMENT_NAME} kubernetes/faucetbot
      --dry-run
      --install
      --namespace ${KUBE_NAMESPACE}
      --values kubernetes/faucetbot/${CI_ENVIRONMENT_NAME}-values.yaml
      --set server.secret.SMF_BACKEND_FAUCET_ACCOUNT_MNEMONIC="${SMF_BACKEND_FAUCET_ACCOUNT_MNEMONIC}"
      --set server.image.dockerTag="${DOCKER_TAG}"
      --set bot.secret.SMF_BOT_MATRIX_ACCESS_TOKEN="${SMF_BOT_MATRIX_ACCESS_TOKEN}"
      --set bot.image.dockerTag="${DOCKER_TAG}"

    # install/upgrade faucetbot
    - helm upgrade ${CI_ENVIRONMENT_NAME} kubernetes/faucetbot
      --install
      --namespace ${KUBE_NAMESPACE}
      --values kubernetes/faucetbot/${CI_ENVIRONMENT_NAME}-values.yaml
      --set server.secret.SMF_BACKEND_FAUCET_ACCOUNT_MNEMONIC="${SMF_BACKEND_FAUCET_ACCOUNT_MNEMONIC}"
      --set server.image.dockerTag="${DOCKER_TAG}"
      --set bot.secret.SMF_BOT_MATRIX_ACCESS_TOKEN="${SMF_BOT_MATRIX_ACCESS_TOKEN}"
      --set bot.image.dockerTag="${DOCKER_TAG}"

westend:
  stage:                           deploy
  environment:
    name:                          westend
  tags:
    - kubernetes-parity-build
  <<:                              *on-release-prod
  <<:                              *deploy-k8s

rococo:
  stage:                           deploy
  environment:
    name:                          rococo
  tags:
    - kubernetes-parity-build
  <<:                              *on-release-prod
  <<:                              *deploy-k8s
